To: whom it may concern
Re: This file documents how to build jive5ab.
From: Harro Verkouter <verkouter@jive.nl>


Jive5ab contains assembly source code for the Intel i386 and x86_64
instruction sets so it will not compile on CPUs that do not support the
target instruction set. Currently it compiles and runs on Linux (Debian
Etch, Ubuntu) and Mac OSX (on Intel hardware), using GNU g++ 3.* or 4.*.

There is a single issue with compiling the code on OSX Mavericks 10.9 using
the system installed 'clang'/'clang++' compiler that come with the Apple
development system Xcode. Until Apple fixes their system compiler one of two
known workarounds can be used. Contact me on the email address should you
want to build jive5ab on such a system.

Due to historical reasons (jive5ab originally built on Mark5 only) the
default is to (attempt to) build a 32-bit binary. If you find yourselves on
a 64-bit system, the build must be forced to 64-bit. See below, under the
"B2B=" option. Likewise, a 32-bit build can be forced on a 64-bit system.


The absolute simplest way to build jive5ab is to go to the directory this
file is in and type 'make':

$> cd /path/to/jive5ab
$> make  


For jive5ab to be able to drive the Haystack I/O boards it must be chmod'ed
to be "suid root". By default jive5ab is just built - any user can do it. If
you need it to be run with full hardware support then it is sufficient to
either:

If you have jive5ab 2.5.2 or newer:

0. The Makefile defines an "install" target.
   So, as ordinary user you can build the program. Then, sudo, su or login
   as root and do the following:

   $> make install

   This will - unfortunately - link a new binary (because the compilation
   date and time are encoded in the binary) and installs it as:

        /opt/jive5ab-<version specific info>

   Furthermore, it will change ownership of that installed file to root:root
   and make the binary suid root.
   Finally it symlinks this newly installed jive5ab as /opt/jivemark5a - the
   default installed name of the current jive5ab version on a Mark5.

For versions of jive5ab < 2.5.2, choose one of the following methods. Note
that both methods just build & set the correct permissions of the jive5ab
binary. If you want the binary installed into a central location or as a
specific name, that is left as an excercise to the user.

1. Build jive5ab as an ordinary user
   Then:
   $> su -
   or 
   $> sudo -s
   
   to become root, followed by:
   # cd /path/to/jive5ab
   # make chown
   # exit
   
   Copy/symlink the binary to taste.

2. Either Log in as root, "su" to root, or "sudo -s" to root. Then:
   # cd /path/to/jive5ab
   # make 
   ...
   # make chown
   # exit

   Again, copy/symlink the resulting binary to taste.




Controlling the output and make commandline options
===================================================

It is possible to influence the output of the build or some of the tools via
commandline options to 'make' of the form "VARIABLE=VALUE".

Below is a description of the supported options and what their effect is.

* B2B=[32|64]
  Default: 32

  Use this option to force a 32-bit or 64-bit executable. As long as
  the Conduant Streamstor API is not available in 64-bit flavour it is
  not possible to have 64-bit jive5ab with Streamstor support.

  Use "SSAPIROOT=nossapi" to be able to produce a 64-bit jive5ab on such a
  system.

  On systems that do not have Streamstor SDK installed at all, the
  "SSAPIROOT=nossapi" is not needed for autodetection will take care of that.

* SSAPIROOT=/path/to/streamstor/linux
  Default: autodetect if present in the standard locations on the
  current system (may evaluate to "nossapi", see below)

  If you wish to compile with a specific library you can use this
  setting to point to that one.

* SSAPIROOT=nossapi
  If the library is not found in the standard locations on the current
  system the autodetect will set SSAPIROOT to this value and force
  jive5ab to be compiled without Streamstor and Haystack I/O board
  [present in Mark5A, A+, B and B+] support.

  You can also force jive5ab to be compiled without Streamstor and
  I/O board support, overriding the (succesfull) autodetection
  by passing this option explicitly on the 'make' commandline.

* WDAPIVER=[0-9]{3,4}
  Depending on your actual Streamstor SDK version there is a 3- or 4-digit
  version numbered "wd api lib" that needs to be linked against.

  In the Conduant Streamstor SDK/API section below there is a short list
  of common SDK version and associated WDAPIVER version numbers.

  The actual WDAPIVER version number is now (7 december 2012) used to adapt
  certain typedefs to the actual type used in the indicated SDK. They used
  to be keyed off of the "MARK5C=1" setting but that is wrong - you can have
  SDK9 on Mark5B(+) and having "MARK5C=1" would make it compile but not
  compile in support for Mark5B's I/O board. Now it does.

  May 2013: The WDAPIVER is now also autodetected. If there is an ambiguity,
            i.e. > 1 libwdapi*.so in the standard location, you must
            disambiguate by manually passing the right version as described
            above

* FILA10G=1
  Versions of FiLa10G firmware up until now typically send erroneous
  sequence numbers preceding the payload in UDP packets. The sequence number
  should be 64-bit little endian; FiLa10G sends 32-bit little endian, but
  puts it at the wrong end of the 64-bit word, rendering interpretation as
  64-bit little endian impossible.

  jive5ab contains a compile time switch to alter the sequence number
  decoding to support this 32-bit-word-in-the-wrong-half-of-a-64-bit-number.
    
  The choice for a compile time switch was one of performance; typically the
  FiLa10G is used for high data rates (4Â Gbps and maybe higher). Thus you
  don't want runtime checking or function-call overhead in decoding the
  sequence numbers.

* CC=[/path/to/]c-compiler
  Default: "gcc"

* CXX=[/path/to/]c++-compiler
  Default: "g++"

* GCCVER=<g++ major version number>
  Default: autodetect
  
  The Streamstor statically linked "libssapi.a" library comes in two 
  flavours: one for GCC 3.* and one for GCC 4.*. The Makefile will
  try to autodetect from the compiler selected by "CXX". In rare cases
  you may have to override the autodetected value

* DEBUG=1
  Default: no debug

  This adds the "-g" flag to the compiler as well as defining the symbol
  "GDBDEBUG" which you can use in the sourcefiles to include sections of
  debug code ["GDBDEBUG" is undefined by default].

* SSE=[20|41]
  Default: autodetect on Linux, SSE2.0 on other systems

  Some of the assembly routines benefit from using SSE4.1 instructions.
  The Makefile will try to autodetect the availability by checking 
  /proc/cpuinfo output for "sse4_1" capability in the CPU flags.
  
  On systems that do not have "/proc/cpuinfo" (e.g. Mac OSX) the default
  is SSE2.0. If you know you're on a recent Intel based CPU (i[3,5,7], Xeon etc)
  you can force inclusion of SSE4.1 instructions by adding "SSE=41" on the 'make'
  commandline.

  AMD CPUs (Phenom II in this case) have a half-hearted SSE4 support ("SSE4a")
  which DOES NOT contain the SSE4.1 instructions that jive5ab is using.
  Even though you'd like to think the AMD CPUs could do SSE4 - jive5ab will/must
  be compiled with SSE2.0 support.
 
* MARK5C=1
  Default: assume code is NOT compiled on a Mark5C

  The Mark5C does not have an I/O board. If you wish to compile jive5ab for
  the Mark5C system, then compiling with MARK5C=1 disables automatic 
  detection of and support for driving the Haystack Mark5A/B I/O boards.
  
  Note: "SSAPIROOT=nossapi" implies "MARK5C=1" since if you do not have
  support for the Streamstor card built in it makes no sense to have
  support for the I/O board: the only way to get data in or out of
  the I/O board is via the Streamstor card.


Caveats
=======

Not all assembly cornerturn routines are available in 64-bit mode yet. The
ones that are available are "8bit x 4" and "16bit x 2". The actual channel
extractors are stubs at the moment (March 2012).


Conduant Streamstor SDK / API
=============================

There is one, optional, dependency, the Streamstor SDK/API. This SDK/API
consists of two libraries "libssapi.a" and "libwdapiXXXX.so" (XXXX is a
version number that is tied to the SDK version).

Jive5ab can be compiled with or without them (even on systems that have the
library). The Makefile will autodetect it in the standard locations on a
Mark5A, A+, B, B+ and C, "/usr/local/src/streamstor/linux" and
"/home/streamstor/Sdk". Use "SSAPIROOT=/path/to/streamstor" to override or
"SSAPIROOT=nossapi" to force compilation without Streamstor support.

Typical SDK versions + WDAPIVER version numbers:

SDK     WDAPIVER
7.2     801
8.2     910/921 (**)
9.0     1011/1021 (**)
9.2.1   1031
9.3a    1110
9.4     1150

(**) You may need to do a "find / -name libwdapi\*" to find the actual version number of the library.
